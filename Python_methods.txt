1. {variable_name}  to take the value of variable inside the print("") statement
				e.g. print(f"the value of {size} is")

2.	random.randint(min, max, totalValues) : returns a random integer.

3.  list(combinations(arr, r))  : to form list inside list with r elements 
								in ever list

4. 	res = map(input().split()) 	: for taking multiple inputs from user
	4.1	res = list(map(input().split(" ")))
		only splits a string not integers

		res = list(map(int/str, input().split())) :- 
		#it will take inputs as list and the elements will be of int/str type

	map(function, iterator) : 
	v, e = map(int, input("Enter the no. of vertices and edges : ").split())

	4.2 input_str = input("Enter multiple integers separated by space: ")   : taking inputs from user
		input_list = input_str.split()
		int_list = [int(num) for num in input_list]

5. 	for i in range(n):
    input_list = input().split()
    # Convert the list of string values to a list of integers
    int_list = [int(val) for val in input_list]
    arr.append(int_list)

6.	A//B : eg. 9//2 = 4

7.	print(*self.list1, sep = ", ")    :  print the elements of the list and seperate them with ","
	print(", ".join(my_list))

8.	names = ['Alice', 'Bob', 'Charlie']
	ages = [25, 30, 35]
	zipped = list(zip(names, ages))
	print(zipped)  # Output: [('Alice', 25), ('Bob', 30), ('Charlie', 35)]

9.	my_string = 'apple,banana,cherry'
	my_list = my_string.split(',')
	print(my_list)  # Output: ['apple', 'banana', 'cherry']

10. ACCESSING ATTRIBUTES OF ANOTHER CLASS 
	getattr() − A python method used to access the attribute of a class.
	hasattr()  − A python method used to verify the presence of an attribute in a class.
	setattr() − A python method used to set an additional attribute in a class.

11.	__str__(self) 	: 	represent the object in a string
	object = Class()
	a = str(object)   # callin __str__()
	__repr__(self)	:	represent the object in programatic way

12.id()    : returns the identity 
	
NUMPY:
	.size    :will give no. of elements present in the array

	.shape	 :give the no. of rows and columns

	.zeros(a, b)   :create an array of aXb having all the elements are zeros

	rng = np.arange(x)  :creates an array having elements from 0 to 10

	.linspace(a, b, c)  : creates an array with elements between a and c , 
						no. of elements are be

	.identity(4)   :creates identity matrix

	arr.reshape(a, b)    :it can create an matrix of a X b from an array "arr" 
							which is 1D and have elements a*b 

	.ravel()       : it is used to undo the reshape back to the normal 1D array

	.sum(axis = 0)  :sum of the elements along the axis 0 and returns an array with those values

	.ndim 		: return no. of dimension  in an array

	
	#methods in 2D array

	newar.argmax()    :gives the index where the max element is present
			similary for getting the min

	newar.argsort()   : gives index in which the array is sorted
	.argmax(axis = 0)

	np.where(arr > x)   : returns the position where element is greater than "x"

	np.nonzero(arr)    : it returns the indices where elements are not zeros
				like.....
				(array([0, 0, 0, 1, 1, 1, 2, 2, 2], dtype=int64),
 				 array([0, 1, 2, 0, 1, 2, 0, 1, 2], dtype=int64))

	np.diag([1,2,3,4])  : 1,2,3,4 as diagional elements



STRINGS:

	capitalize()		Converts the first character to upper case
	casefold()			Converts string into lower case
	center()			Returns a centered string
	count()				Returns the number of times a specified value occurs in a string
	encode()			Returns an encoded version of the string
	endswith()			Returns true if the string ends with the specified value
	expandtabs()		Sets the tab size of the string
	find()				Searches the string for a specified value and returns the position of where it was found
	format()			Formats specified values in a string
	format_map()		Formats specified values in a string
	index()				Searches the string for a specified value and returns the position of where it was found
	isalnum()			Returns True if all characters in the string are alphanumeric
	isalpha()			Returns True if all characters in the string are in the alphabet
	isascii()			Returns True if all characters in the string are ascii characters
	isdecimal()			Returns True if all characters in the string are decimals
	isdigit()			Returns True if all characters in the string are digits
	isidentifier()		Returns True if the string is an identifier
	islower()			Returns True if all characters in the string are lower case
	isnumeric()			Returns True if all characters in the string are numeric
	isprintable()		Returns True if all characters in the string are printable
	isspace()			Returns True if all characters in the string are whitespaces
	istitle()			Returns True if the string follows the rules of a title
	isupper()			Returns True if all characters in the string are upper case
	join()				Converts the elements of an iterable into a string
	ljust()				Returns a left justified version of the string
	lower()				Converts a string into lower case
	lstrip()			Returns a left trim version of the string
	maketrans()			Returns a translation table to be used in translations
	partition()			Returns a tuple where the string is parted into three parts
	replace()			Returns a string where a specified value is replaced with a specified value
	rfind()				Searches the string for a specified value and returns the last position of where it was found
	rindex()			Searches the string for a specified value and returns the last position of where it was found
	rjust()				Returns a right justified version of the string
	rpartition()		Returns a tuple where the string is parted into three parts
	rsplit()			Splits the string at the specified separator, and returns a list
	rstrip()			Returns a right trim version of the string
	split()				Splits the string at the specified separator, and returns a list
	splitlines()		Splits the string at line breaks and returns a list
	startswith()		Returns true if the string starts with the specified value
	strip()				Returns a trimmed version of the string
	swapcase()			Swaps cases, lower case becomes upper case and vice versa
	title()				Converts the first character of each word to upper case
	translate()			Returns a translated string
	upper()				Converts a string into upper case
	zfill()				Fills the string with a specified number of 0 values at the beginning

	#	my_string = "Hi!? I!? love!? Python!?"
		my_new_string = my_string.replace("!","").replace("?","")

		REMOVING OF CHARACTER CAN ALSO BE DONE USING THE LIBRARY "re"
		import re
		my_string = "Hi!? I!? love!? Python!?"	
		my_new_string = re.sub('[!?]',"",my_string)


	#	Node.appendChild()	 only accepts Node objects. 
		Element.append()	 has no return value, whereas Node.appendChild() returns the appended Node object.


LIST :
	append()	Used for appending and adding elements to the end of the List. 
	copy()		It returns a shallow copy of a list
	clear()		This method is used for removing all items from the list. 
	count()		This methods count the elements
	extend() 	Adds each element of the iterable to the end of the List
	index()		Returns the lowest index where the element appears.  
	pop()	 	Removes and returns the last value from the List or the given index value. 
	reverse() 	Reverses objects of the List in place.
	sort()		Sort a List in ascending, descending, or user-defined order
	max()		Calculates maximum of all the elements of List

	del[a:b]  deletes all the elements in range "a" till "b"
	insert(a, x) position and element to be added 
	remove()    deletes the first occurince of num. mentioned in its argument.
	extend(second_list)  extends the list with the elements present in another list.
	

FILE INPUT/output
	"r"   Opens a file for reading only.
	"r+"  Opens a file for both reading and writing.
	"rb"  Opens a file for reading only in binary format.
	"rb+" Opens a file for both reading and writing in binary format.
	"w"   Opens a file for writing only.
	"a"   Open for writing. The file is created if it does not exist.
	"a+"  Open for reading and writing.  The file is created if it does not exist.

SETS:
	
	Method	Description
	add()							Adds an element to the set
	clear()							Removes all the elements from the set
	copy()							Returns a copy of the set
	difference()					Returns a set containing the difference between two or more sets
	difference_update()				Removes the items in this set that are also included in another, specified set
	discard()						Remove the specified item
	intersection()					Returns a set, that is the intersection of two other sets
	intersection_update()			Removes the items in this set that are not present in other, specified set(s)
	isdisjoint()					Returns whether two sets have a intersection or not
	issubset()						Returns whether another set contains this set or not
	issuperset()					Returns whether this set contains another set or not
	pop()							Removes an element from the set
	remove()						Removes the specified element
	symmetric_difference()			Returns a set with the symmetric differences of two sets
	symmetric_difference_update()	inserts the symmetric differences from this set and another
	union()							Return a set containing the union of sets
	update()						Update the set with the union of this set and others			


DICTIONARY:

	Method	Description
	clear()			Removes all the elements from the dictionary
	copy()			Returns a copy of the dictionary
	fromkeys()		Returns a dictionary with the specified keys and value
	get()			Returns the value of the specified key
	items()			Returns a list containing a tuple for each key value pair
	keys()			Returns a list containing the dictionary's keys
	pop()			Removes the element with the specified key
	popitem()		Removes the last inserted key-value pair
	setdefault()	Returns the value of the specified key. If the key does not exist: insert the key, with the specified value
	update()		Updates the dictionary with the specified key-value pairs
	values()		Returns a list of all the values in the dictionary

	# Define a dictionary
	my_dict = {"key1": 10, "key2": 20, "key3": 30}
	# Loop through all the values in the dictionary
	for value in my_dict.values():
    print(value)



STACK:

	maxsize 			Number of items allowed in the queue.
	empty() 			Return True if the queue is empty, False otherwise.
	full() 				Return True if there are maxsize items in the queue. 
						If the queue was initialized with maxsize=0 (the default), then full() never returns True.
	get() 				Remove and return an item from the queue. 
						If the queue is empty, wait until an item is available.
	get_nowait() 		Return an item if one is immediately available, else raise QueueEmpty.
	put(item) 			Put an item into the queue. If the queue is full, wait until a free slot is available before adding the item.
	put_nowait(item) 	Put an item into the queue without blocking. If no free slot is immediately available, raise QueueFull.
	qsize() 			Return the number of items in the queue.



MATH(MODULE)

	math.ceil(x): 	Returns the smallest integer greater than or equal to x.

	math.floor(x): 	Returns the largest integer less than or equal to x.

	math.sqrt(x): 	Returns the square root of x.

	math.pow(x, y): Returns x raised to the power y.

	math.exp(x):	 Returns e raised to the power x.

	math.log(x, base): 	Returns the logarithm of x to the given base.

	math.sin(x), math.cos(x), math.tan(x): 	Returns the sine, cosine, and tangent of x in radians.

	math.degrees(x), math.radians(x):	 Converts x from radians to degrees, or from degrees to radians.

	math.pi: 	Returns the constant value of pi (3.141592653589793).

	math.e:	 	Returns the constant value of e (2.718281828459045).


QUEUE(USING DEQUEUE):

	class collections.deque([iterable[, maxlen]])

	append(x)		Add x to the right side of the deque.

	appendleft(x)			Add x to the left side of the deque.

	clear()			Remove all elements from the deque leaving it with length 0.

	copy()			Create a shallow copy of the deque.

	count(x)			Count the number of deque elements equal to x.

	extend(iterable)			Extend the right side of the deque by appending elements from the iterable argument.

	extendleft(iterable)			Extend the left side of the deque by appending elements from iterable. 
									Note, the series of left appends results in reversing the order of elements in the iterable argument.

	index(x[, start[, stop]])			Return the position of x in the deque (at or after index start and before index stop). 
										Returns the first match or raises ValueError if not found.

	insert(i, x)			Insert x into the deque at position i.
							If the insertion would cause a bounded deque to grow beyond maxlen, an IndexError is raised.

	pop()			Remove and return an element from the right side of the deque. If no elements are present, raises an IndexError.

	popleft()			Remove and return an element from the left side of the deque. If no elements are present, raises an IndexError.

	remove(value)			Remove the first occurrence of value. If not found, raises a ValueError.

	reverse()			Reverse the elements of the deque in-place and then return None.

	rotate(n=1)			Rotate the deque n steps to the right. If n is negative, rotate to the left.
						When the deque is not empty, rotating one step to the right is 
						equivalent to d.appendleft(d.pop()), and rotating one step to the left is equivalent to d.append(d.popleft()).

	Deque objects also provide one read-only attribute:

	maxlen			Maximum size of a deque or None if unbounded.

ASYNCHRONOUS ITERATORS:
# define an asynchronous iterator
	class AsyncIterator():
		# constructor, define some state
		def __init__(self):
			self.counter = 0
	
		# create an instance of the iterator
		def __aiter__(self):
			return self
	
		# return the next awaitable
		async def __anext__(self):
			# check for no further items
			if self.counter >= 10:
				raise StopAsyncIteration
			# increment the counter
			self.counter += 1
			# return the counter value
			return self.counter

# create the iterator
		it = AsyncIterator()

		# get an awaitable for one step of the iterator
		awaitable = anext(it)
		# execute the one step of the iterator and get the result
		result = await awaitable

# example of one step of an  asynchronous iterator with anext()
		# SuperFastPython.com
		# example of one step of an asynchronous iterator
		import asyncio
		
		# define an asynchronous iterator
		class AsyncIterator():
			# constructor, define some state
			def __init__(self):
				self.counter = 0
		
			# create an instance of the iterator
			def __aiter__(self):
				return self
		
			# return the next awaitable
			async def __anext__(self):
				# check for no further items
				if self.counter >= 10:
					raise StopAsyncIteration
				# increment the counter
				self.counter += 1
				# simulate work
				await asyncio.sleep(1)
				# return the counter value
				return self.counter
		
		# main coroutine
		async def main():
			# create the async iterator
			it = AsyncIterator()
			# step the iterator one iteration
			awaitable = anext(it)
			# get the result from one iteration
			result = await awaitable
			# report the result
			print(result)
		
		# execute the asyncio program
		asyncio.run(main())